---
import "../styles/global.css";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";

export interface Props {
  title: string;
  description?: string;
}

const { 
  title = "Atom Writer | AI Writing Assistant",
  description = "Boost your writing productivity with Atom Writer - the AI assistant that helps you create high-quality content faster than ever before." 
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Critical CSS inlined -->
    <style>
      body{font-family:'Inter',sans-serif;line-height:1.5}
      .co{max-width:1280px;margin:0 auto;padding:0 1rem}
      .h1{font-size:2.5rem;font-weight:700;line-height:1.2}
      .h2{font-size:2rem;font-weight:700;line-height:1.2}
      .bt{display:inline-flex;align-items:center;justify-content:center;padding:.75rem 1.5rem;font-weight:500;border-radius:.5rem;transition:all .2s}
      .bt-pr{background:linear-gradient(135deg,#6366f1,#8b5cf6);color:white}
      .gr-tx{background:linear-gradient(135deg,#6366f1,#8b5cf6);-webkit-background-clip:text;-webkit-text-fill-color:transparent;background-clip:text}
    </style>
    
    <!-- Preload critical fonts -->
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" as="style">
    <link rel="preload" href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;500;700&display=swap" as="style">
    
    <!-- DNS prefetch for external domains -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    <link rel="dns-prefetch" href="//images.pexels.com">
    
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/og-image.png" />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content="/og-image.png" />
    
    <!-- Load fonts asynchronously -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" media="print" onload="this.media='all'">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;500;700&display=swap" media="print" onload="this.media='all'">
    <noscript>
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap">
      <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;500;700&display=swap">
    </noscript>
  </head>
  <body class="bg-gradient-to-br from-gray-50 via-white to-gray-50 text-gray-900" style="font-family: 'Space Grotesk', sans-serif;">
    <Navbar />
    <slot />
    <Footer />

    <!-- Defer non-critical JavaScript -->
    <script type="module">
      // Initialize intersection observer for animation on scroll
      document.addEventListener('DOMContentLoaded', () => {
        const animatedElements = document.querySelectorAll('.an');
        
        if ('IntersectionObserver' in window) {
          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.add('in');
                observer.unobserve(entry.target);
              }
            });
          }, { threshold: 0.1, rootMargin: '50px' });
          
          animatedElements.forEach(el => observer.observe(el));
        } else {
          // Fallback for older browsers
          animatedElements.forEach(el => el.classList.add('in'));
        }
      });
    </script>
  </body>
</html>

<style is:global>
  .an {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    will-change: opacity, transform;
  }
  
  .an.in {
    opacity: 1;
    transform: translateY(0);
  }
  
  .d1 { transition-delay: 0.1s; }
  .d2 { transition-delay: 0.2s; }
  .d3 { transition-delay: 0.3s; }
  .d4 { transition-delay: 0.4s; }
  .d5 { transition-delay: 0.5s; }
</style>