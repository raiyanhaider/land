---
interface Props {
  title: string;
  description: string;
  icon: string;
  delay: string;
  id: string;
}

const { title, description, icon, delay, id } = Astro.props;

const iconMap = {
  builder: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">
              <path d="M3.375 3C2.339 3 1.5 3.84 1.5 4.875v.75c0 1.036.84 1.875 1.875 1.875h17.25c1.035 0 1.875-.84 1.875-1.875v-.75C22.5 3.839 21.66 3 20.625 3H3.375z" />
              <path fill-rule="evenodd" d="M3.087 9l.54 9.176A3 3 0 006.62 21h10.757a3 3 0 002.995-2.824L20.913 9H3.087zm6.133 2.845a.75.75 0 011.06 0l1.72 1.72 1.72-1.72a.75.75 0 111.06 1.06l-1.72 1.72 1.72 1.72a.75.75 0 11-1.06 1.06L12 15.685l-1.72 1.72a.75.75 0 11-1.06-1.06l1.72-1.72-1.72-1.72a.75.75 0 010-1.06z" clip-rule="evenodd" />
            </svg>`,
  wand: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">
            <path fill-rule="evenodd" d="M12 1.5a.75.75 0 01.75.75V4.5a.75.75 0 01-1.5 0V2.25A.75.75 0 0112 1.5zM5.636 4.136a.75.75 0 011.06 0l1.592 1.591a.75.75 0 01-1.061 1.06l-1.591-1.59a.75.75 0 010-1.061zm12.728 0a.75.75 0 010 1.06l-1.591 1.592a.75.75 0 01-1.06-1.061l1.59-1.591a.75.75 0 011.061 0zm-6.816 4.496a.75.75 0 01.82.311l5.228 7.917a.75.75 0 01-.777 1.148l-2.097-.43 1.045 3.9a.75.75 0 01-1.45.388l-1.044-3.899-1.601 1.42a.75.75 0 01-1.247-.606l.569-9.47a.75.75 0 01.554-.68zM3 10.5a.75.75 0 01.75-.75H6a.75.75 0 010 1.5H3.75A.75.75 0 013 10.5zm14.25 0a.75.75 0 01.75-.75h2.25a.75.75 0 010 1.5H18a.75.75 0 01-.75-.75zm-8.962 3.712a.75.75 0 010 1.061l-1.591 1.591a.75.75 0 11-1.061-1.06l1.591-1.592a.75.75 0 011.06 0z" clip-rule="evenodd" />
          </svg>`,
  chat: `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">
            <path fill-rule="evenodd" d="M4.848 2.771A49.144 49.144 0 0112 2.25c2.43 0 4.817.178 7.152.52 1.978.292 3.348 2.024 3.348 3.97v6.02c0 1.946-1.37 3.678-3.348 3.97-1.94.284-3.916.455-5.922.505a.39.39 0 00-.266.112L8.78 21.53A.75.75 0 017.5 21v-3.955a48.842 48.842 0 01-2.652-.316c-1.978-.29-3.348-2.024-3.348-3.97V6.741c0-1.946 1.37-3.68 3.348-3.97z" clip-rule="evenodd" />
          </svg>`
};
---

<div class={`an ${delay} cd feature-card group relative overflow-hidden`} id={id}>
  <div class="feature-icon mb-6 p-3 inline-flex items-center justify-center rounded-xl text-white bg-primary-600 group-hover:rotate-3 transition-transform">
    <Fragment set:html={iconMap[icon]} />
  </div>
  
  <h3 class="h4 mb-3 group-hover:text-primary-600 transition-colors">{title}</h3>
  
  <p class="text-gray-600 mb-6">{description}</p>
  
  <button class="learn-more text-primary-600 font-medium flex items-center">
    Learn more
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1 group-hover:translate-x-1 transition-transform" viewBox="0 0 20 20" fill="currentColor">
      <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
  </button>
  
  <div class="feature-demo absolute top-full left-0 w-full h-full bg-white p-6 transition-all duration-300 transform translate-y-0 opacity-0 invisible group-hover:translate-y-[-100%] group-hover:opacity-100 group-hover:visible">
    <div class="demo-content h-full flex flex-col">
      <h4 class="text-lg font-medium mb-2 text-primary-600">{title} Demo</h4>
      <div class="demo-animation flex-1 bg-gray-50 rounded-lg p-4 overflow-hidden">
        <!-- Demo content added via JavaScript -->
      </div>
      <button class="close-demo mt-4 text-gray-500 text-sm font-medium">
        Close Demo
      </button>
    </div>
  </div>
</div>

<script define:vars={{ id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const card = document.getElementById(id);
    if (!card) return;
    
    const learnMoreBtn = card.querySelector('.learn-more');
    const closeBtn = card.querySelector('.close-demo');
    const demoAnimation = card.querySelector('.demo-animation');
    
    // Demo content based on feature type
    const contentBuilderDemo = `
      <div class="flex flex-col h-full">
        <div class="mb-3 bg-white rounded p-2 shadow-sm">
          <div class="h-2 w-3/4 bg-primary-200 rounded mb-2"></div>
          <div class="h-2 bg-gray-200 rounded"></div>
        </div>
        <div class="mb-3 bg-white rounded p-2 shadow-sm">
          <div class="h-2 w-1/2 bg-primary-200 rounded mb-2"></div>
          <div class="h-2 bg-gray-200 rounded"></div>
          <div class="h-2 mt-1 bg-gray-200 rounded"></div>
        </div>
        <div class="mb-3 bg-white rounded p-2 shadow-sm animate-pulse">
          <div class="h-2 w-2/3 bg-primary-400 rounded mb-2"></div>
          <div class="h-2 bg-primary-200 rounded"></div>
        </div>
        <div class="text-center text-xs text-gray-500 mt-2">AI analyzing your topic...</div>
      </div>
    `;
    
    const blogWizardDemo = `
      <div class="flex flex-col h-full">
        <div class="text-xs text-gray-500 mb-1">Topic: Digital Marketing Trends</div>
        <div class="typing-effect overflow-hidden whitespace-nowrap border-r-2 border-primary-400 pr-1 mb-2">
          Generating blog post...
        </div>
        <div class="flex gap-1 mb-2">
          <div class="h-2 w-full bg-gray-200 rounded overflow-hidden">
            <div class="progress-bar h-full bg-primary-400 rounded" style="width: 0%"></div>
          </div>
          <div class="text-xs text-gray-500 whitespace-nowrap">0%</div>
        </div>
        <div class="flex-1 overflow-hidden">
          <div class="output-text text-xs text-gray-700">
          </div>
        </div>
      </div>
    `;
    
    const aiChatDemo = `
      <div class="flex flex-col h-full">
        <div class="typing-input flex items-center gap-2 mb-2">
          <div class="h-8 w-8 rounded-full bg-gray-300 flex-shrink-0"></div>
          <div class="flex-1 bg-white rounded-lg p-2 shadow-sm">
            <div class="typing-effect overflow-hidden whitespace-nowrap border-r-2 border-primary-400">
              How can I improve my article's intro?
            </div>
          </div>
        </div>
        <div class="typing-response flex items-center gap-2 mb-2 opacity-0">
          <div class="h-8 w-8 rounded-full bg-primary-300 flex-shrink-0 flex items-center justify-center text-white">
            AI
          </div>
          <div class="flex-1 bg-white rounded-lg p-2 shadow-sm">
            <div class="response-text text-xs"></div>
          </div>
        </div>
        <div class="mt-auto pt-2 border-t border-gray-200">
          <div class="h-8 bg-white rounded-full border border-gray-300 flex items-center px-3">
            <div class="h-2 w-3/4 bg-gray-200 rounded"></div>
            <div class="ml-auto h-5 w-5 rounded-full bg-primary-100 text-primary-500 flex items-center justify-center text-xs">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-3 h-3">
                <path d="M3.105 2.289a.75.75 0 00-.826.95l1.414 4.925A1.5 1.5 0 005.135 9.25h6.115a.75.75 0 010 1.5H5.135a1.5 1.5 0 00-1.442 1.086l-1.414 4.926a.75.75 0 00.826.95 28.896 28.896 0 0015.293-7.154.75.75 0 000-1.115A28.897 28.897 0 003.105 2.289z" />
              </svg>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Set demo content based on feature ID
    if (id === 'content-builder') {
      demoAnimation.innerHTML = contentBuilderDemo;
    } else if (id === 'blog-wizard') {
      demoAnimation.innerHTML = blogWizardDemo;
    } else if (id === 'ai-chat') {
      demoAnimation.innerHTML = aiChatDemo;
    }
    
    // Show feature demo
    learnMoreBtn?.addEventListener('click', (e) => {
      e.preventDefault();
      card.classList.add('demo-active');
      
      // Animate based on feature type
      if (id === 'content-builder') {
        // Content builder animation
      } else if (id === 'blog-wizard') {
        const progressBar = demoAnimation.querySelector('.progress-bar');
        const progressText = demoAnimation.querySelector('.text-xs.text-gray-500.whitespace-nowrap');
        const outputText = demoAnimation.querySelector('.output-text');
        
        let progress = 0;
        const blogText = "# 5 Digital Marketing Trends for 2025\n\nIn today's rapidly evolving digital landscape, staying ahead of marketing trends is essential for business success. This article explores five emerging digital marketing trends that will dominate in 2025.\n\n## 1. AI-Powered Personalization\nArtificial intelligence is revolutionizing how brands connect with customers through hyper-personalized experiences.";
        
        const interval = setInterval(() => {
          progress += 2;
          if (progressBar && progressText) {
            progressBar.style.width = `${progress}%`;
            progressText.textContent = `${progress}%`;
          }
          
          if (outputText) {
            const textLength = Math.floor((blogText.length * progress) / 100);
            outputText.textContent = blogText.substring(0, textLength);
          }
          
          if (progress >= 100) {
            clearInterval(interval);
          }
        }, 100);
      } else if (id === 'ai-chat') {
        setTimeout(() => {
          const responseElement = demoAnimation.querySelector('.typing-response');
          const responseText = demoAnimation.querySelector('.response-text');
          
          if (responseElement) {
            responseElement.style.opacity = '1';
          }
          
          if (responseText) {
            const text = "Try opening with a surprising statistic or question that challenges common assumptions. This creates immediate interest and establishes relevance for your readers.";
            let i = 0;
            
            const typeResponse = setInterval(() => {
              if (i < text.length) {
                responseText.textContent += text.charAt(i);
                i++;
              } else {
                clearInterval(typeResponse);
              }
            }, 20);
          }
        }, 1000);
      }
    });
    
    // Hide feature demo
    closeBtn?.addEventListener('click', () => {
      card.classList.remove('demo-active');
    });
  });
</script>

<style>
  .feature-card {
    height: 100%;
    transition: all 0.3s ease;
  }
  
  .feature-card:hover {
    z-index: 10;
  }
  
  .feature-demo {
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    z-index: 20;
  }
  
  .demo-active .feature-demo {
    transform: translateY(-100%);
    opacity: 1;
    visibility: visible;
  }
  
  @keyframes typing {
    from { width: 0 }
    to { width: 100% }
  }
  
  .typing-effect {
    animation: typing 2s steps(30);
  }
</style>